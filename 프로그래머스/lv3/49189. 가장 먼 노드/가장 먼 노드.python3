import heapq
import sys

INF = sys.maxsize


def solution(n, edge):
    def dijkstra(start):
        q = []
        heapq.heappush(q, (0, start))
        distance[start] = 0

        while q:
            dist, now = heapq.heappop(q)

            if distance[now] < dist:
                continue

            for i in graph[now]:
                cost = dist + i[1]

                if cost < distance[i[0]]:
                    distance[i[0]] = cost
                    heapq.heappush(q, (cost, i[0]))

    start = 1

    answer = 0

    graph = [[] for _ in range(n + 1)]

    distance = [INF] * (n + 1)

    for a, b in edge:
        graph[a].append((b, 1))
        graph[b].append((a, 1))

    dijkstra(start)

    max_val = 0
    for i in range(1, n + 1):
        if distance[i] != INF and distance[i] > max_val:
            answer = 1
            max_val = distance[i]
        elif distance[i] != INF and distance[i] == max_val:
            answer += 1

    return answer